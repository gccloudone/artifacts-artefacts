name: Test OIDC Permissions - Debug Mode
on:
  push:
    branches: [feat/jfrog-oidc]
  workflow_dispatch:

env:
  REGISTRY: artifacts-artefacts.devops.cloud-nuage.canada.ca
  JFROG_CLI_LOG_LEVEL: DEBUG # ADD THIS LINE for JFrog Support

jobs:
  test-oidc:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JFrog CLI with OIDC
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-jfrog-cli
        env:
          JF_URL: https://${{ env.REGISTRY }}
          JF_PROJECT: ssc-aurora
          JFROG_CLI_AVOID_NEW_VERSION_WARNING: "true"
          JFROG_CLI_LOG_LEVEL: DEBUG # ADD THIS LINE too
        with:
          oidc-provider-name: github-oidc
          version: 2.76.1

      - name: Collect System Information
        run: |
          echo "=== SYSTEM INFO FOR JFROG SUPPORT CASE ==="
          echo "Workflow Run ID: ${{ github.run_id }}"
          echo "Date: $(date -u)"
          echo "JFrog CLI Version: $(jf --version)"
          echo "Authentication: OIDC"
          echo "Project: ssc-aurora"
          echo "========================================"

      - name: Test Basic JFrog Connection
        run: |
          echo "Testing basic JFrog connection..."
          jf rt ping

      - name: Test Xray Entitlements
        run: |
          echo "Testing Xray contextual analysis entitlements..."
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
            -H "Authorization: Bearer ${{ steps.setup-jfrog-cli.outputs.oidc-token }}" \
            https://${{ env.REGISTRY }}/xray/api/v1/entitlements/feature/contextual_analysis)
          echo "Response: $RESPONSE"

      - name: Docker Login
        run: |
          echo "Logging into JFrog Docker registry..."
          # For OIDC, we need to use a different approach
          # Let's try using jf rt docker-login instead
          jf rt docker-login ${{ env.REGISTRY }}

      - name: Test Docker Scan (The Failing Command)
        run: |
          echo "Testing the failing docker scan command with DEBUG logging..."
          cd examples/python-app

          # Build test image using standard Dockerfile (not Chainguard)
          IMAGE_TAG=${{ env.REGISTRY }}/ssc-aurora-docker-local/debug-test:${{ github.sha }}
          echo "Building: $IMAGE_TAG"
          docker build -f Dockerfile.standard -t $IMAGE_TAG .

          echo "Pushing image to registry..."
          docker push $IMAGE_TAG

          echo "Running: jf docker scan with debug logging..."
          jf docker scan $IMAGE_TAG --project=ssc-aurora --fail=false || echo "Expected failure for JFrog Support analysis"

      - name: Test Simple Audit Scan
        run: |
          echo "Testing simple audit scan..."
          cd examples/python-app
          jf audit --format=table --project=ssc-aurora --fail=false || echo "Audit completed"
